{
  "swagger": "2.0",
  "info": {
    "description": "myRetail RESTful API",
    "version": "1.0.0",
    "title": "myRetail RESTful API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "neil@neilthedev.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "someHeroku.heroku.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Product",
      "description": "Operations on Products"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/products/{id}": {
      "get": {
        "tags": ["Product"],
        "summary": "Return a Question by ID",
        "description": "Returns a single Question object",
        "operationId": "getQuestionById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "QuestionId",
            "in": "path",
            "description": "ID of Question to return",
            "required": true,
            "type": "integer",
            "format": "int64",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Question"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": ["Question"],
        "summary": "Updates a Question in the store with form data",
        "operationId": "updateQuestionWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "QuestionId",
            "in": "path",
            "description": "ID of Question that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the Question",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the Question",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Questionstore_auth": ["write:Questions", "read:Questions"]
          }
        ]
      },
      "delete": {
        "tags": ["Question"],
        "summary": "Deletes a Question",
        "operationId": "deleteQuestion",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "QuestionId",
            "in": "path",
            "description": "Question id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          }
        },
        "security": [
          {
            "Questionstore_auth": ["write:Questions", "read:Questions"]
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": ["User"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["User"],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["User"],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["User"],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/assessment": {
      "post": {
        "tags": ["Assessment"],
        "summary": "Create an Assessment for User on a Question",
        "operationId": "addAssessment"
      }
    },
    "/assessment/{AssessmentId}": {
      "get": {
        "tags": ["Assessment"],
        "summary": "Get an Assessment object",
        "operationId": "getAssessment"
      },
      "put": {
        "tags": ["Assessment"],
        "summary": "Update an Assessment object",
        "operationId": "updateAssessment"
      },
      "delete": {
        "tags": ["Assessment"],
        "summary": "Delete an Assessment object",
        "operationId": "deleteAssessment"
      }
    },
    "/questionset": {
      "get": {
        "tags": ["QuestionSet"],
        "summary": "Get all questions",
        "operationId": "getAllQuestions"
      },
      "post": {
        "tags": ["QuestionSet"],
        "summary": "Create a QuestionSet",
        "operationId": "createQuestionSet"
      }
    },
    "/questionset/{QuestionSetId}": {
      "get": {
        "tags": ["QuestionSet"],
        "summary": "Get a QuestionSet",
        "operationId": "getQuestionSet"
      },
      "put": {
        "tags": ["QuestionSet"],
        "summary": "Update a QuestionSet",
        "operationId": "updateQuestionSet"
      },
      "delete": {
        "tags": ["QuestionSet"],
        "summary": "Delete a Questionset"
      }
    },
    "/video": {
      "post": {
        "tags": ["Video"],
        "summary": "Create a Video object",
        "operationId": "createVideo"
      }
    },
    "/video/{videoId}": {
      "get": {
        "tags": ["Video"],
        "summary": "Get a Video object",
        "operationId": "getVideo"
      }
    },
    "/answer": {
      "post": {
        "tags": ["Answer"],
        "summary": "Create an Answer object",
        "operationId": "createAnswer"
      }
    },
    "/answer/{answerId}": {
      "get": {
        "tags": ["Answer"],
        "summary": "Get an Answer object",
        "operationId": "getAnswer"
      },
      "put": {
        "tags": ["Answer"],
        "summary": "Update an Answer object",
        "operationId": "updateAnswer"
      }
    },
    "/user/{username}/answers": {
      "get": {
        "tags": ["User", "Answer"],
        "summary": "Get Users Answers",
        "operationId": "getUsersAnswers"
      }
    }
  },
  "securityDefinitions": {
    "Questionstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://Questionstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:Questions": "modify Questions in your account",
        "read:Questions": "read your Questions"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "QuestionSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "categories": {
          "type": "array"
        },
        "questions": {
          "type": "array"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Answer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "question": {
          "type": "object"
        }
      }
    },
    "Question": {
      "type": "object",
      "required": ["text", "categories", "questionSets"],
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string",
          "example": "How to reverse a linked list?"
        },
        "categories": {
          "type": "array"
        },
        "sources": {
          "type": "string",
          "example": "https://leetcode.com/problems/valid-parentheses/"
        },
        "timestamp": {
          "type": "date"
        }
      }
    },
    "Assessment": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string"
        },
        "percentageSaidImportant": {
          "type": "integer",
          "format": "int32"
        },
        "percentageSaidAll": {
          "type": "integer",
          "format": "int32"
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "validWordsSaid": {
          "type": "array"
        },
        "importantWordsSaid": {
          "type": "array"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
